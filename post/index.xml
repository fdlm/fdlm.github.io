<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on fdlm.github.io</title>
    <link>http://fdlm.github.io/post/</link>
    <description>Recent content in Posts on fdlm.github.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 23 May 2016 09:22:08 +0200</lastBuildDate>
    <atom:link href="http://fdlm.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>The Deep Chroma Extractor</title>
      <link>http://fdlm.github.io/post/deepchroma/</link>
      <pubDate>Mon, 23 May 2016 09:22:08 +0200</pubDate>
      
      <guid>http://fdlm.github.io/post/deepchroma/</guid>
      <description>

&lt;p&gt;This page contains additional information and data necessary to reproduce the
results of the following paper:&lt;/p&gt;

&lt;p&gt;F. Korzeniowski and G. Widmer. &amp;ldquo;Feature Learning for Chord Recognition: The
Deep Chroma Extractor&amp;rdquo;. In &lt;em&gt;Proceedings of the 17th International Society for
Music Information Retrieval Conference (ISMIR 2016)&lt;/em&gt;,  New York, USA.&lt;/p&gt;

&lt;h2 id=&#34;software:1bfd6a13e67e8e2c64570b6655045f5e&#34;&gt;Software&lt;/h2&gt;

&lt;p&gt;The pre-trained feature extractor is available as part of the
&lt;a href=&#34;https://github.com/CPJKU/madmom&#34;&gt;madmom&lt;/a&gt; audio processing framework as the
&lt;code&gt;DeepChromaProcessor&lt;/code&gt; class. Note that the model bundled with madmom differs
from the one we used in the paper: it uses less units in the hidden layers of
the neural network and operates on a narrower frequency band. We thus reduced
the size of the model files without compromising the results too much.&lt;/p&gt;

&lt;p&gt;The best performing model trained for the paper is available
&lt;a href=&#34;https://drive.google.com/file/d/0B0gBhdh1fIPKUld3RWN5VlNGM2M/view?usp=sharing&#34;&gt;here&lt;/a&gt;.
To use it with madmom, set the &lt;code&gt;models&lt;/code&gt; parameter of the &lt;code&gt;DeepChromaProcessor&lt;/code&gt;
class accordingly, and adapt the spectrogram parameters: &lt;code&gt;fmin=30&lt;/code&gt;,
&lt;code&gt;fmax=5500&lt;/code&gt;, &lt;code&gt;unique_filters=False&lt;/code&gt;. Note that the file actually contains
8 models, one for each test fold. If you load all of them, the final prediction
will be the average prediction of each model.&lt;/p&gt;

&lt;p&gt;If you are using the models in your research, make sure to only use models that
are not trained on files that you test on. A model with index
i (e.g. &lt;code&gt;chroma_dnn_i.pkl&lt;/code&gt;) was trained on all files in folds different from i.
For example, the model in &lt;code&gt;chroma_dnn_2.pkl&lt;/code&gt; was trained on all files defined
in the &lt;code&gt;folddef_$j.fold&lt;/code&gt; (where &lt;code&gt;$j&lt;/code&gt; is in {0, 1, 3, 4, 5, 6, 7}) files of
all datasets used (beatles, queen, zweieck, rwc, robbie_williams). See the
download section at the bottom for the fold definitions we used.&lt;/p&gt;

&lt;h3 id=&#34;reproducing-the-experiments:1bfd6a13e67e8e2c64570b6655045f5e&#34;&gt;Reproducing the experiments&lt;/h3&gt;

&lt;p&gt;Although we tried to facilitate reproducing our experiments as easily as
possible, doing it is much more involved than applying the pre-trained
model. You will have re-create the experimental pipeline, install all
necessary libraries, and prepare the audio and chord data.&lt;/p&gt;

&lt;h4 id=&#34;experimental-pipeline-setup:1bfd6a13e67e8e2c64570b6655045f5e&#34;&gt;Experimental Pipeline Setup&lt;/h4&gt;

&lt;p&gt;The  experimental pipeline is implemented in Python, so you
will need a standard &amp;ldquo;scientific Python&amp;rdquo; setup with NumPy, SciPy, etc&amp;hellip; You
will also need the following packages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Theano/Theano&#34;&gt;Theano&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Lasagne/Lasagne&#34;&gt;Lasagne&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/fdlm/dmgr&#34;&gt;dmgr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/fdlm/nn&#34;&gt;nn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/CPJKU/madmom&#34;&gt;madmom&lt;/a&gt;*&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/librosa/librosa&#34;&gt;librosa&lt;/a&gt;*&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/craffel/mir_eval&#34;&gt;mir_eval&lt;/a&gt;*&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bitbucket.org/xi/pyyaml&#34;&gt;pyyaml&lt;/a&gt;*&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/IDSIA/sacred&#34;&gt;sacred&lt;/a&gt;*&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Packages marked with a * can be installed using &lt;code&gt;pip&lt;/code&gt;, the others are either
not available or recommended to be installed from source. If I missed any
dependency, please let me know.&lt;/p&gt;

&lt;p&gt;Once you have all libraries installed, clone the
&lt;a href=&#34;https://github.com/fdlm/chordrec&#34;&gt;chordrec&lt;/a&gt; repository and add its path to
the &lt;code&gt;$PYTHONPATH&lt;/code&gt; environment variable.&lt;/p&gt;

&lt;h4 id=&#34;data-setup:1bfd6a13e67e8e2c64570b6655045f5e&#34;&gt;Data Setup&lt;/h4&gt;

&lt;p&gt;Put all datasets into respective subdirectories under
&lt;code&gt;chordrec/experiments/data&lt;/code&gt;: &lt;code&gt;beatles&lt;/code&gt;, &lt;code&gt;queen&lt;/code&gt;, &lt;code&gt;zweieck&lt;/code&gt;, &lt;code&gt;robbie_williams&lt;/code&gt;,
and &lt;code&gt;rwc&lt;/code&gt;. The datasets have to contain three types of data: audio files in
&lt;code&gt;.flac&lt;/code&gt; format, corresponding chord annotations in lab format with the file
extension &lt;code&gt;.chords&lt;/code&gt;, and the cross-validation split definitions. Audio and
annotation files can be organised on a directory structure, but do not need
to; the programs will look for any &lt;code&gt;.flac&lt;/code&gt; and &lt;code&gt;.chord&lt;/code&gt; files in all
directories recursively. However, the split definition
files must be in a &lt;code&gt;splits&lt;/code&gt; sub-directory in each dataset directory (e.g.
&lt;code&gt;beatles/splits&lt;/code&gt;). File names of audio and annotation files must correspond to
the names given in the split definition files. For more information regarding
the data take a look at the Data section below, where we provide a &lt;code&gt;.zip&lt;/code&gt; file
with the annotations and split definitions that you just need to extract
into the &lt;code&gt;experiments&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;data&lt;/code&gt; directory should look like this, where the internal structures
of the &lt;code&gt;queen&lt;/code&gt;, &lt;code&gt;robbie_williams&lt;/code&gt;, &lt;code&gt;rwc&lt;/code&gt; and &lt;code&gt;zweieck&lt;/code&gt; directories following
the one of the &lt;code&gt;beatles&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;experiments
 +-- data
      +-- beatles
           +-- *.flac
           +-- *.chords
           +-- splits
                +-- 8-fold_cv_album_distributed_*.fold
      +-- queen
      +-- robbie_williams
      +-- rwc
      +-- zweieck
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Make sure the link &lt;code&gt;chordrec/experiments/ismir2016/data&lt;/code&gt; refers to this
directory and works.&lt;/p&gt;

&lt;h4 id=&#34;running-the-experiment:1bfd6a13e67e8e2c64570b6655045f5e&#34;&gt;Running the Experiment&lt;/h4&gt;

&lt;p&gt;We provide script and configuration files that run the exact experiments that
produced the results shown in Table 1 in the paper. They reside under
&lt;code&gt;experiments/ismir2016&lt;/code&gt;. If everything is set up correctly, running the
experiment should be as easy as calling the &lt;code&gt;run.sh&lt;/code&gt; script. This can take
a considerable amount of time, because each configuration is run ten times.
You can change that by editing the &lt;code&gt;run.sh&lt;/code&gt; script itself.&lt;/p&gt;

&lt;p&gt;Results are stored in the &lt;code&gt;results&lt;/code&gt; sub-directory created when running
the experiment. In &lt;code&gt;results&lt;/code&gt;, there are four directories for each tested
configuration, which contain the results of all experiments. The results of
each experiment is stored in &lt;code&gt;artifacts/results.yaml&lt;/code&gt;. To get a quick
overview of the results for a specific configuration, you can simply use
the &lt;code&gt;grep&lt;/code&gt; command, e.g.:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;grep majmin results/deep_chroma_test/*/artifacts/results.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;data:1bfd6a13e67e8e2c64570b6655045f5e&#34;&gt;Data&lt;/h2&gt;

&lt;p&gt;We trained the neural network on a compound dataset comprising the Beatles,
Queen, Zweieck, Robbie Williams and RWC popular music datasets. While we cannot
provide audio files due to copyright reasons, we do provide links with more
information about these datasets and to the chord annotations we used. Note
that our file naming scheme differs from the annotation archives you can
download on the respective sites. For convenience, we provide a &lt;code&gt;.zip&lt;/code&gt; archive
with annotations following our naming scheme further below.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Beatles, Queen and Zweieck:&lt;/strong&gt; See the &lt;a href=&#34;http://isophonics.net/&#34;&gt;isophonics website&lt;/a&gt; for chord annotations and information about audio files.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Robbie Williams&lt;/strong&gt;: The dataset description can be found in &lt;em&gt;Bruno Di Giorgi et. al., &amp;ldquo;Automatic chord recognition based on the
probabilistic modeling of diatonic modal harmony&amp;rdquo;&lt;/em&gt;. Download the annotations from
&lt;a href=&#34;https://www.researchgate.net/publication/260399240_Chord_and_Harmony_annotations_of_the_first_five_albums_by_Robbie_Williams&#34;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;RWC&lt;/strong&gt;: For information on obtaining the audio files, see the &lt;a href=&#34;https://staff.aist.go.jp/m.goto/RWC-MDB/&#34;&gt;RWC website&lt;/a&gt;. Chord annotations are on &lt;a href=&#34;https://github.com/tmc323/Chord-Annotations&#34;&gt;GitHub&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;download:1bfd6a13e67e8e2c64570b6655045f5e&#34;&gt;Download&lt;/h3&gt;

&lt;p&gt;For convenience, we provide the annotations renamed to our naming scheme
&lt;a href=&#34;https://drive.google.com/file/d/0B0gBhdh1fIPKamVaNnpaWHhwdWc/view?usp=sharing&#34;&gt;here&lt;/a&gt;. This
archive also includes the fold definitions for cross-validation for each
dataset. You can extract this archive into the &lt;code&gt;experiments/data&lt;/code&gt; directory and
add the audio files to the respective directories. Then you should be ready to
go.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>